syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/yourorg/yourproject/api/v1";

// Сообщения
message OrderItem {
  int64 product_id = 1;
  int32 quantity = 2;
  string product_title = 3;
  string product_url = 4;
  int64 price_cents = 5;
  string price_currency = 6;
}

message Order {
  int64 id = 1;
  int64 customer_id = 2;
  string delivery_address = 3;
  int64 total_price_cents = 4;
  string total_price_currency = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  repeated OrderItem order_items = 8;
}

message BatchInsertRequest {
  repeated Order orders = 1;
}

message BatchInsertResponse {
  repeated Order orders = 1;
}

message ListOrdersRequest {
  repeated int64 ids = 1;
  repeated int64 customer_ids = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message ListOrdersResponse {
  repeated Order orders = 1;
}

message AuditLogOrder {
  int64 id = 1;
  int64 order_id = 2;
  int64 order_item_id = 3;
  int64 customer_id = 4;
  string order_status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message SaveAuditLogRequest {
  repeated AuditLogOrder audit_logs = 1;
}

message SaveAuditLogResponse {
  repeated AuditLogOrder audit_logs = 1;
}

// Сервис без HTTP аннотаций
service OrderService {
  // Создать заказы пакетно
  rpc BatchInsert(BatchInsertRequest) returns (BatchInsertResponse);

  // Получить список заказов
  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse);

  // Сохранить аудит логи
  rpc SaveAuditLog(SaveAuditLogRequest) returns (SaveAuditLogResponse);
}